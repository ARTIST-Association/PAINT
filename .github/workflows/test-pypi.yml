name: Publish to TestPyPI and Test

on:
  push:
    branches: [release-test]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.set-version.outputs.version }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine

    - name: Set unique dev version and patch project name
      id: set-version
      run: |
        BASE_VERSION=$(grep '^version =' pyproject.toml | cut -d '"' -f2 | cut -d'.' -f1-3)
        UNIQUE_VERSION="${BASE_VERSION}.dev${{ github.run_number }}"
        echo "New version: $UNIQUE_VERSION"

        # Patch the version and name in pyproject.toml
        sed -i "s/^version = .*/version = \"$UNIQUE_VERSION\"/" pyproject.toml
        sed -i 's/^name = "paint"/name = "paint-csp-test"/' pyproject.toml

        # Export version for downstream jobs
        echo "version=$UNIQUE_VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$UNIQUE_VERSION" >> $GITHUB_ENV

    - name: Build package
      run: python -m build

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

  test-from-testpypi:
    needs: build-and-publish
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    runs-on: ${{ matrix.os }}
    env:
      VERSION: ${{ needs.build-and-publish.outputs.version }}

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package from TestPyPI (with retry)
      run: |
        pip install --upgrade pip

        RETRIES=5
        SLEEP=10
        for i in $(seq 1 $RETRIES); do
          echo "Attempt $i: trying to install paint-csp-test==${VERSION}"
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple --pre "paint-csp-test[dev]==${VERSION}" && break
          echo "Package not available yet, waiting..."
          sleep $SLEEP
        done
    - name: Run tests with coverage
      run: |
        python --version
        pytest --cov=paint
